{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pollAnswers1","option","votes","pollStyles1","questionSeparator","questionSeparatorWidth","questionBold","questionColor","align","theme","pollAnswers2","pollStyles2","App","state","handleVote","voteAnswer","pollAnswers","pollNumber","newPollAnswers","map","answer","setState","this","className","question","answers","onVote","customStyles","noStorage","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAOMA,EAAe,CACnB,CAAEC,OAAQ,MAAOC,MAAO,IACxB,CAAED,OAAQ,KAAMC,MAAO,GACvB,CAAED,OAAQ,eAAiBC,MAAO,IAE9BC,EAAc,CAClBC,mBAAmB,EACnBC,uBAAwB,WACxBC,cAAc,EACdC,cAAe,UACfC,MAAO,SACPC,MAAO,UAKHC,EAAe,CACnB,CAAET,OAAQ,QAASC,MAAO,GAC1B,CAAED,OAAQ,MAAOC,MAAO,GACxB,CAAED,OAAQ,UAAWC,MAAO,IAExBS,EAAc,CAClBP,mBAAmB,EACnBC,uBAAwB,WACxBC,cAAc,EACdC,cAAe,UACfC,MAAO,SACPC,MAAO,QAIYG,E,4MACnBC,MAAQ,CACNb,aAAa,GAAD,OAAMA,GAClBU,aAAa,GAAD,OAAMA,I,EAGpBI,WAAa,SAACC,EAAYC,EAAaC,GACrC,IAAMC,EAAiBF,EAAYG,KAAI,SAAAC,GAErC,OADIA,EAAOnB,SAAWc,GAAYK,EAAOlB,QAClCkB,KAGU,IAAfH,EACF,EAAKI,SAAS,CACZrB,aAAckB,IAGhB,EAAKG,SAAS,CACZX,aAAcQ,K,uDAKT,IAAD,SAC+BI,KAAKT,MAApCb,EADA,EACAA,aAAcU,EADd,EACcA,aAEtB,OACE,yBAAKa,UAAU,OACb,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,QAAd,gBAEF,0BAAMA,UAAU,QACd,6BACE,kBAAC,IAAD,CAAMC,SAjEI,yBAiEqBC,QAASzB,EAAc0B,OAAQ,SAAAX,GAAU,OAAI,EAAKD,WAAWC,EAAYf,EAAc,IAAI2B,aAAcxB,EAAayB,WAAW,KAElK,6BACE,kBAAC,IAAD,CAAMJ,SApDI,gCAoDqBC,QAASf,EAAcgB,OAAQ,SAAAX,GAAU,OAAI,EAAKD,WAAWC,EAAYL,EAAc,IAAIiB,aAAchB,EAAaiB,WAAW,W,GApC3IC,aC1BbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.463a4418.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport Poll from 'react-polls'\n\n\nconst pollQuestion1 = 'Is react-polls useful?'\nconst pollAnswers1 = [\n  { option: 'Yes', votes: 24 },\n  { option: 'No', votes: 3 },\n  { option: 'I don\\'t know', votes: 1 }\n]\nconst pollStyles1 = {\n  questionSeparator: true,\n  questionSeparatorWidth: 'question',\n  questionBold: true ,\n  questionColor: '#303030',\n  align: 'center',\n  theme: 'purple'\n}\n\n\nconst pollQuestion2 = 'What framework do you prefer?'\nconst pollAnswers2 = [\n  { option: 'React', votes: 5 },\n  { option: 'Vue', votes: 2 },\n  { option: 'Angular', votes: 1 }\n]\nconst pollStyles2 = {\n  questionSeparator: false,\n  questionSeparatorWidth: 'question',\n  questionBold: false ,\n  questionColor: '#4F70D6',\n  align: 'center',\n  theme: 'blue'\n}\n\n\nexport default class App extends Component {\n  state = {\n    pollAnswers1: [...pollAnswers1],\n    pollAnswers2: [...pollAnswers2]\n  }\n\n  handleVote = (voteAnswer, pollAnswers, pollNumber) => {\n    const newPollAnswers = pollAnswers.map(answer => {\n      if (answer.option === voteAnswer) answer.votes++\n      return answer\n    })\n\n    if (pollNumber === 1) {\n      this.setState({\n        pollAnswers1: newPollAnswers\n      })\n    } else {\n      this.setState({\n        pollAnswers2: newPollAnswers\n      })\n    }\n  }\n\n  render () {\n    const { pollAnswers1, pollAnswers2 } = this.state\n\n    return (\n      <div className='app'>\n        <header className='header'>\n          <h1 className='name'>react-polls</h1>\n        </header>\n        <main className='main'>\n          <div>\n            <Poll question={pollQuestion1} answers={pollAnswers1} onVote={voteAnswer => this.handleVote(voteAnswer, pollAnswers1, 1)} customStyles={pollStyles1} noStorage={false} />\n          </div>\n          <div>\n            <Poll question={pollQuestion2} answers={pollAnswers2} onVote={voteAnswer => this.handleVote(voteAnswer, pollAnswers2, 2)} customStyles={pollStyles2} noStorage={false} />\n          </div>\n        </main>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}